{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"D2b Data Pipeline Overview D2b is a simple data pipeline designed to help automate the processes involved in extracting, transforming, analysing and exporting data insights carried out by data professionals at Data2bot. The automation pipeline is designed to abstract complexities and allow analysts to focus solely on SQL. Installation and setup \ud83d\udd29\ud83e\ude9b Clone the repository. git clone https://github.com/anochima/Data2Bot-Assessment.git cd data2bot-assessments pip3 install -r configs/requirements.txt cp configs/config.ini.example config.ini The above commands will: Download the project pipeline into your device Install all neccessary packages needed to successfully run the project Create a configuration file for setting up the Database connections, etc. Database Configuration \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb After running the above script, a new configuration file will be added to the project directory config.ini . Make sure to set up all necessary configurations for the database. Note \u2139\ufe0f: The config.ini file is intended to abstract valuable information regarding database connection. Hence, informations added here will be ignored during deployment. [SERVER] DB_CONNECTION=pgsql DB_HOST=localhost DB_PORT=5432 DB_DATABASE=postgres DB_USERNAME=root DB_PASSWORD='' DB_DEFAULT_SCHEMA = DB_STAGING_SCHEMA = DB_ANALYTICS_SCHEMA = S3_WAREHOUSE_BUCKET_NAME = Retrieving configuration data from config.ini To access the configuration variables into your python script. Import env function from handlers.env_handler . The env() function sets or returns config file section, key value env('SECTION', 'KEY', 'VALUE') . section: The config file section e.g SERVER key: A key in the selected section value:(str, optional) If set, overides the existing section key value in config.ini and set new key to the value specified. # scripts/Handlers/env_handler.py from handlers.env_handler import env # Get the database username DB_USERNAME = env ( 'SERVER' , 'DB_USERNAME' ) print ( DB_USERNAME ) #output: root # Change the DB_USERNAME from script NEW_DB_USERNAME = env ( 'SERVER' , 'DB_USERNAME' , 'new_username' ) print ( NEW_DB_USERNAME ) #output: new_username Extracting Data From Warehouse \ud83c\udfec # scripts/Providers/ExtractDataServiceProvider.py class ExtractDataServiceProvider ( Service ): # names of objects to download service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" \"...\" ] # path where object will be stored service_path = \"../Data2bot-Assessment/data/raw\" Loading Data to Database \u2b06\ufe0f # scripts/Providers/DataLoadServiceProvider.py class DataLoadServiceProvider ( Service ): # name of files in data/raw to upload. # Don't include the full file path. # You must set service_path=None \" service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" , ] service_path = \"../Data2bot-Assessment/data/raw\" Running SQL Queries All external SQL queries are stored inside the /SQL directory. Any external query must be registered inside the Analytics Service Provider class. # scripts/Providers/AnalyticsServiceProvider.py class AnalyticsServiceProvider ( Service ): # name of analytics in /SQL e.g. \"product_analysis.sql\" service_list = [ \"analytics1.sql\" , \"analytics2.sql\" , '...' ] service_path = \"../Data2bot-Assessment/sql\" Running the Pipeline \u26a1\ufe0f To run the pipeline, simply run the following command in your terminal. python3 scripts/start.py Documentation To read the documentation, run mkdocs serve on terminal","title":"Home"},{"location":"#d2b-data-pipeline","text":"","title":"D2b Data Pipeline"},{"location":"#overview","text":"D2b is a simple data pipeline designed to help automate the processes involved in extracting, transforming, analysing and exporting data insights carried out by data professionals at Data2bot. The automation pipeline is designed to abstract complexities and allow analysts to focus solely on SQL.","title":"Overview"},{"location":"#installation-and-setup","text":"Clone the repository. git clone https://github.com/anochima/Data2Bot-Assessment.git cd data2bot-assessments pip3 install -r configs/requirements.txt cp configs/config.ini.example config.ini The above commands will: Download the project pipeline into your device Install all neccessary packages needed to successfully run the project Create a configuration file for setting up the Database connections, etc.","title":"Installation and setup \ud83d\udd29\ud83e\ude9b"},{"location":"#database-configuration","text":"After running the above script, a new configuration file will be added to the project directory config.ini . Make sure to set up all necessary configurations for the database. Note \u2139\ufe0f: The config.ini file is intended to abstract valuable information regarding database connection. Hence, informations added here will be ignored during deployment. [SERVER] DB_CONNECTION=pgsql DB_HOST=localhost DB_PORT=5432 DB_DATABASE=postgres DB_USERNAME=root DB_PASSWORD='' DB_DEFAULT_SCHEMA = DB_STAGING_SCHEMA = DB_ANALYTICS_SCHEMA = S3_WAREHOUSE_BUCKET_NAME =","title":"Database Configuration \ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb"},{"location":"#retrieving-configuration-data-from-configini","text":"To access the configuration variables into your python script. Import env function from handlers.env_handler . The env() function sets or returns config file section, key value env('SECTION', 'KEY', 'VALUE') . section: The config file section e.g SERVER key: A key in the selected section value:(str, optional) If set, overides the existing section key value in config.ini and set new key to the value specified. # scripts/Handlers/env_handler.py from handlers.env_handler import env # Get the database username DB_USERNAME = env ( 'SERVER' , 'DB_USERNAME' ) print ( DB_USERNAME ) #output: root # Change the DB_USERNAME from script NEW_DB_USERNAME = env ( 'SERVER' , 'DB_USERNAME' , 'new_username' ) print ( NEW_DB_USERNAME ) #output: new_username","title":"Retrieving configuration data from config.ini"},{"location":"#extracting-data-from-warehouse","text":"# scripts/Providers/ExtractDataServiceProvider.py class ExtractDataServiceProvider ( Service ): # names of objects to download service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" \"...\" ] # path where object will be stored service_path = \"../Data2bot-Assessment/data/raw\"","title":"Extracting Data From Warehouse \ud83c\udfec"},{"location":"#loading-data-to-database","text":"# scripts/Providers/DataLoadServiceProvider.py class DataLoadServiceProvider ( Service ): # name of files in data/raw to upload. # Don't include the full file path. # You must set service_path=None \" service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" , ] service_path = \"../Data2bot-Assessment/data/raw\"","title":"Loading Data to Database \u2b06\ufe0f"},{"location":"#running-sql-queries","text":"All external SQL queries are stored inside the /SQL directory. Any external query must be registered inside the Analytics Service Provider class. # scripts/Providers/AnalyticsServiceProvider.py class AnalyticsServiceProvider ( Service ): # name of analytics in /SQL e.g. \"product_analysis.sql\" service_list = [ \"analytics1.sql\" , \"analytics2.sql\" , '...' ] service_path = \"../Data2bot-Assessment/sql\"","title":"Running SQL Queries"},{"location":"#running-the-pipeline","text":"To run the pipeline, simply run the following command in your terminal. python3 scripts/start.py","title":"Running the Pipeline \u26a1\ufe0f"},{"location":"#documentation","text":"To read the documentation, run mkdocs serve on terminal","title":"Documentation"},{"location":"handlers/","text":"Handlers Database Connection Handler class DatabaseConn ( LogHandler ): def __init__ ( self , log_file = env ( \"LOG\" , \"ERROR_LOG\" )) -> None : \"\"\"Establish database connection based on the server settings in config.ini Args: log_file (str, optional): the name or path to the file where error will be logged. Defaults to ERROR_LOG path in config.ini \"\"\" super () . __init__ ( log_file = log_file ) self . conn = None # Load connection variables from config.ini self . DB_HOST = env ( \"SERVER\" , \"DB_HOST\" ) self . DB_PORT = env ( \"SERVER\" , \"DB_PORT\" ) self . DB_DATABASE = env ( \"SERVER\" , \"DB_DATABASE\" ) self . DB_USERNAME = env ( \"SERVER\" , \"DB_USERNAME\" ) self . DB_PASSWORD = env ( \"SERVER\" , \"DB_PASSWORD\" ) def connect ( self ): # Establish a connection with the db try : self . conn = pg . connect ( host = self . DB_HOST , dbname = self . DB_DATABASE , user = self . DB_USERNAME , password = self . DB_PASSWORD , port = self . DB_PORT , ) except Exception as e : # log error to file self . logger . debug ( e ) self . error () # self.logger.info(self.conn) return self . conn Env Connection Handler # read configuraton file config_file = \"../Data2bot-Assessment/config.ini\" config = ConfigParser () config . read ( config_file ) def env ( section , key , value = None ): \"\"\" Sets or returns config file section, key value parameters ---------- section: The config file section key: A key in the selected section value: desired value for the selected key, if not set, returns the key's current value \"\"\" if value is None : return config [ section ][ key ] else : config [ section ][ key ] = value return config Service Handler class Service ( ABC ): service_list = None service_path = None def __init_subclass__ ( cls , ** kwargs ) -> None : for required in ( \"service_list\" , \"service_path\" ): if not getattr ( cls , required ): raise TypeError ( f \"Can't instantiate class { cls . __name__ } without { required } attribute defined\" ) return super () . __init_subclass__ ( ** kwargs ) @abstractclassmethod def services ( self , * args , ** kwargs ): return [ \"\" . join ([ self . service_path , service ]) for service in self . service_list ] @abstractclassmethod def execute_service ( self , * args , ** kwargs ): return None Log Handler from Handlers.env_handler import env class LogHandler : def __init__ ( self , log_file = env ( \"LOG\" , \"ERROR_LOG\" )): # set our database logger self . logger = logging . getLogger ( __name__ ) self . logger . setLevel ( env ( \"LOG\" , \"LOG_LEVEL\" )) # set the log formatter self . formatter = logging . Formatter ( \"------------------------ \\n %(asctime)s \\n ------------------------ \\n %(filename)s : \\n \\ \\n %(message)s \\n @ %(funcName)s : %(pathname)s \" ) # set the file handler self . file_handler = logging . FileHandler ( filename = log_file ) self . file_handler . setFormatter ( self . formatter ) self . logger . addHandler ( self . file_handler )","title":"Handlers"},{"location":"handlers/#handlers","text":"","title":"Handlers"},{"location":"handlers/#database-connection-handler","text":"class DatabaseConn ( LogHandler ): def __init__ ( self , log_file = env ( \"LOG\" , \"ERROR_LOG\" )) -> None : \"\"\"Establish database connection based on the server settings in config.ini Args: log_file (str, optional): the name or path to the file where error will be logged. Defaults to ERROR_LOG path in config.ini \"\"\" super () . __init__ ( log_file = log_file ) self . conn = None # Load connection variables from config.ini self . DB_HOST = env ( \"SERVER\" , \"DB_HOST\" ) self . DB_PORT = env ( \"SERVER\" , \"DB_PORT\" ) self . DB_DATABASE = env ( \"SERVER\" , \"DB_DATABASE\" ) self . DB_USERNAME = env ( \"SERVER\" , \"DB_USERNAME\" ) self . DB_PASSWORD = env ( \"SERVER\" , \"DB_PASSWORD\" ) def connect ( self ): # Establish a connection with the db try : self . conn = pg . connect ( host = self . DB_HOST , dbname = self . DB_DATABASE , user = self . DB_USERNAME , password = self . DB_PASSWORD , port = self . DB_PORT , ) except Exception as e : # log error to file self . logger . debug ( e ) self . error () # self.logger.info(self.conn) return self . conn","title":"Database Connection Handler"},{"location":"handlers/#env-connection-handler","text":"# read configuraton file config_file = \"../Data2bot-Assessment/config.ini\" config = ConfigParser () config . read ( config_file ) def env ( section , key , value = None ): \"\"\" Sets or returns config file section, key value parameters ---------- section: The config file section key: A key in the selected section value: desired value for the selected key, if not set, returns the key's current value \"\"\" if value is None : return config [ section ][ key ] else : config [ section ][ key ] = value return config","title":"Env Connection Handler"},{"location":"handlers/#service-handler","text":"class Service ( ABC ): service_list = None service_path = None def __init_subclass__ ( cls , ** kwargs ) -> None : for required in ( \"service_list\" , \"service_path\" ): if not getattr ( cls , required ): raise TypeError ( f \"Can't instantiate class { cls . __name__ } without { required } attribute defined\" ) return super () . __init_subclass__ ( ** kwargs ) @abstractclassmethod def services ( self , * args , ** kwargs ): return [ \"\" . join ([ self . service_path , service ]) for service in self . service_list ] @abstractclassmethod def execute_service ( self , * args , ** kwargs ): return None","title":"Service Handler"},{"location":"handlers/#log-handler","text":"from Handlers.env_handler import env class LogHandler : def __init__ ( self , log_file = env ( \"LOG\" , \"ERROR_LOG\" )): # set our database logger self . logger = logging . getLogger ( __name__ ) self . logger . setLevel ( env ( \"LOG\" , \"LOG_LEVEL\" )) # set the log formatter self . formatter = logging . Formatter ( \"------------------------ \\n %(asctime)s \\n ------------------------ \\n %(filename)s : \\n \\ \\n %(message)s \\n @ %(funcName)s : %(pathname)s \" ) # set the file handler self . file_handler = logging . FileHandler ( filename = log_file ) self . file_handler . setFormatter ( self . formatter ) self . logger . addHandler ( self . file_handler )","title":"Log Handler"},{"location":"providers/","text":"Service Providers Extracting Data From Warehouse # scripts/Providers/ExtractDataServiceProvider.py class ExtractDataServiceProvider ( Service ): # names of objects to download service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" \"...\" ] # path where object will be stored service_path = \"../Data2bot-Assessment/data/raw\" DataLoad Service Provider # scripts/Providers/DataLoadServiceProvider.py class DataLoadServiceProvider ( Service ): # name of files in data/raw to upload. # Don't include the full file path. # You must set service_path=None \" service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" , ] service_path = \"../Data2bot-Assessment/data/raw\" Analytics Service Provider # scripts/Providers/AnalyticsServiceProvider.py class AnalyticsServiceProvider ( Service ): # name of analytics in /SQL e.g. \"product_analysis.sql\" service_list = [ \"analytics1.sql\" , \"analytics2.sql\" , '...' ] service_path = \"../Data2bot-Assessment/sql\"","title":"Service Providers"},{"location":"providers/#service-providers","text":"","title":"Service Providers"},{"location":"providers/#extracting-data-from-warehouse","text":"# scripts/Providers/ExtractDataServiceProvider.py class ExtractDataServiceProvider ( Service ): # names of objects to download service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" \"...\" ] # path where object will be stored service_path = \"../Data2bot-Assessment/data/raw\"","title":"Extracting Data From Warehouse"},{"location":"providers/#dataload-service-provider","text":"# scripts/Providers/DataLoadServiceProvider.py class DataLoadServiceProvider ( Service ): # name of files in data/raw to upload. # Don't include the full file path. # You must set service_path=None \" service_list = [ \"orders.csv\" , \"reviews.csv\" , \"shipment_deliveries.csv\" , ] service_path = \"../Data2bot-Assessment/data/raw\"","title":"DataLoad Service Provider"},{"location":"providers/#analytics-service-provider","text":"# scripts/Providers/AnalyticsServiceProvider.py class AnalyticsServiceProvider ( Service ): # name of analytics in /SQL e.g. \"product_analysis.sql\" service_list = [ \"analytics1.sql\" , \"analytics2.sql\" , '...' ] service_path = \"../Data2bot-Assessment/sql\"","title":"Analytics Service Provider"},{"location":"recommendations/","text":"","title":"Recommendations"}]}